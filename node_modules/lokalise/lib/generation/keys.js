'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('util.promisify');

var _util2 = _interopRequireDefault(_util);

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _globPromise = require('glob-promise');

var _globPromise2 = _interopRequireDefault(_globPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var templatePath = _path2.default.join(__dirname, '../../templates/keys.mustache');

var render = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(messages, options) {
    var template;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _util2.default)(_fs2.default.readFile)(templatePath, 'utf8');

          case 2:
            template = _context.sent;
            return _context.abrupt('return', _mustache2.default.render(template, {
              flow: options.flow,
              es5: options.type === 'es5' || typeof options.type === 'undefined',
              es6: options.type === 'es6',
              keys: JSON.stringify(messages, null, 2)
            }));

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function render(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var parse = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(file) {
    var content;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _util2.default)(_fs2.default.readFile)(file, 'utf8');

          case 2:
            content = _context2.sent;
            return _context2.abrupt('return', JSON.parse(content));

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function parse(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

exports.default = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(messagePath, options) {
    var output, files, contents, uniqueKeys, keys;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            output = options.output || messagePath + '/keys.js';
            _context3.next = 3;
            return (0, _globPromise2.default)(messagePath + '/*.json');

          case 3:
            files = _context3.sent;
            _context3.next = 6;
            return Promise.all(files.map(function (f) {
              return parse(f);
            }));

          case 6:
            contents = _context3.sent;
            uniqueKeys = Object.assign.apply(Object, [{}].concat(_toConsumableArray(contents)));
            keys = Object.keys(uniqueKeys).reduce(function (obj, key) {
              obj[key] = key;
              return obj;
            }, {});
            _context3.t0 = (0, _util2.default)(_fs2.default.writeFile);
            _context3.t1 = output;
            _context3.next = 13;
            return render(keys, options);

          case 13:
            _context3.t2 = _context3.sent;
            _context3.next = 16;
            return (0, _context3.t0)(_context3.t1, _context3.t2, 'utf8');

          case 16:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();