'use strict';

require('babel-polyfill');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _config = require('./config');

var config = _interopRequireWildcard(_config);

var _request = require('./request');

var request = _interopRequireWildcard(_request);

var _download = require('./download');

var download = _interopRequireWildcard(_download);

var _keys = require('./generation/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

module.exports = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var conf, token, project, output, file;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _commander2.default.version('0.0.5').usage('[options] [config.json]').description('Lokali.se client for retrieving localization files.').option('-t, --token <token>', 'set the api token').option('-p, --project <id>', 'set the project id').option('-o, --output <path>', 'output path').parse(process.argv);

          _context.prev = 1;
          _context.next = 4;
          return config.build(_commander2.default.args[0], _commander2.default);

        case 4:
          conf = _context.sent;
          token = conf.token, project = conf.project, output = conf.output;
          _context.next = 8;
          return request.bundle(token, project);

        case 8:
          file = _context.sent;
          _context.next = 11;
          return download.archive(file, output);

        case 11:
          if (!conf.keys) {
            _context.next = 14;
            break;
          }

          _context.next = 14;
          return (0, _keys2.default)(conf.output, conf.keys);

        case 14:

          console.log('Localization updated');
          _context.next = 21;
          break;

        case 17:
          _context.prev = 17;
          _context.t0 = _context['catch'](1);

          console.log('Localization update failed');
          console.error(_context.t0);

        case 21:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined, [[1, 17]]);
}));